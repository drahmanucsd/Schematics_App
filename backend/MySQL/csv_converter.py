import csv

# Specify the input CSV file and output text file paths
csv_file_path = 'sample.csv'
text_file_path = 'csvdata1.sql'

table_columns = [
    "CREATE",
    "Column1",
    "AIR_MOTOR",
    "APPROVED_BY",
    "CHS",
    "CUST",
    "DATE_DRAWN",
    "DESCR",
    "DIRNAME",
    "DRAWING_NUMBER",
    "DRAWN_BY",
    "DWG_TYPE",
    "ELEC_MOTOR",
    "EM_LOCKOUT",
    "EM_SEQUENCING",
    "EM_SINGLE_PILOT_SOURCE",
    "EM_FAIL_OPEN",
    "EM_LOW_TRIP_POSITION",
    "EM_ESD_VALVE",
    "EM_DUAL_PILOT_SOURCE",
    "EM_TEST_VALVE",
    "EM_HIGH_TRIP_POSITION",
    "EM_SPECIFIC_TRIP_POINT",
    "EM_PILOT_FILTER",
    "X_DIFFERENTIAL",
    "Y_MANUAL",
    "Z_PILOT",
    "LATCHING_FEATURE",
    "MANUAL_TEST",
    "DIFFERENTIAL_TYPE_ESD",
    "ENERGIZE_SOLENOIDS_TO",
    "SUCT_AND_DISCH_EQUAL",
    "SUCT_HIGHER_THAN_DISCH",
    "HIGH_PRESSURE",
    "ELECTRONICS_LINEBEAK",
    "FAIL_CLOSE",
    "DASHPOT",
    "HEAT_SENSING_TRIP",
    "LOW_PRESSURE_SOLENOID",
    "AM_PILOT_ISOLATION_VALVE",
    "PILOT_REGULATOR",
    "AO_DOUBLE_HOLDING_VALVE",
    "SHUTTLE_VALVE_TO_TANK",
    "SHUTTLE_VALVE_TO_CONTROL",
    "PRESS_SELECTOR_MANIFOLD",
    "PNEUMATIC_LINEBREAK",
    "SOLENOIDS",
    "AIR_RELAY_VALVE",
    "CLOSE_MA_OR_PSI",
    "HIGH_PRESSURE_SOLENOID",
    "OPEN_MA_OR_PSI",
    "VALVE_POSITIONER",
    "CONTROLLER",
    "PRESSURIZE_TO",
    "NO_BLEED_FEATURE",
    "TWO_WAY_SOLENOID",
    "THREE_WAY_SOLENOID",
    "FOUR_WAY_SOLENOID",
    "REDUNDANT_SOLENOID",
    "TRIGGER_VALVE",
    "MOMENTARY_IMPULSE",
    "PRESSURIZE_PILOT_TO",
    "PILOT_VALVE",
    "FNAME",
    "FTYPE",
    "AMH_MANUAL",
    "AMH_LOW_PRESSURE_TRIP",
    "AMH_SINGLE_WAY_PNEUMATIC",
    "AMH_TWO_WAY_PNEUMATIC",
    "AMH_REGULATING",
    "AMH_HEAT_SENSING",
    "AMH_TWO_WAY_ELECTRIC",
    "AMH_SINGLE_WAY_ELECTRIC",
    "AMH_ELECTRIC_FAILSAFE",
    "AMH_SINGLE_SOL_WAY_AND_FAILSAFE",
    "AMH_DOUBLE_SOL_WAY_AND_FAILSAFE",
    "AMH_LINEBREAK",
    "AMH_EMERGENCY_SHUTDOWN",
    "AMH_HIGH_PRESSURE_TRIP",
    "CHS_ELECTRIC_REMOTE_TWO_WAY",
    "CHS_SINGLE_SOL_WAY_AND_FAILSAFE",
    "CHS_HYDRAULIC_FAILSAFE",
    "CHS_HEAT_SENSING",
    "CHS_HIGH_PRESSURE_TRIP",
    "CHS_LOW_PRESSURE_TRIP",
    "CHS_LINEBREAK",
    "CHS_DOUBLE_SOL_WAY_AND_FAILSAFE",
    "CHS_ELECTRIC_FAILSAFE",
    "CHS_EMERGENCY_SHUTDOWN",
    "CHS_TWO_WAY_PNEUMATIC",
    "CHS_MANUAL",
    "CHS_TWO_WAY_HYDRAULIC",
    "CHS_SINGLE_WAY_ELECTRIC",
    "CHS_REGULATING",
    "EMH_TWO_WAY_ELECTRIC",
    "EMH_ELECTRIC_FAILSAFE",
    "EMH_DOUBLE_SOL_WAY_AND_FAILSAFE",
    "EMH_EMERGENCY_SHUTDOWN",
    "EMH_LINEBREAK",
    "EMH_HIGH_PRESSURE_TRIP",
    "EMH_LOW_PRESSURE_TRIP",
    "EMH_REGULATING",
    "EMH_HEAT_SENSING",
    "GHT_MANUAL",
    "GHT_LINEBREAK",
    "GHT_DOUBLE_SOL_WAY_AND_FAILSAFE",
    "GHT_STATION_BYPASS",
    "GHT_HEAT_SENSING",
    "GHT_SINGLE_SOL_WAY_AND_FAILSAFE",
    "GHT_RIVER_CROSSING",
    "GHT_ELECTRIC_REMOTE_ONE_WAY",
    "GHT_ELECTRIC_REMOTE_TWO_WAY",
    "GHT_ELECTRIC_FAILSAFE",
    "GHT_EMERGENCY_SHUTDOWN",
    "GHT_HIGH_PRESSURE_TRIP",
    "GHT_LOW_PRESSURE_TRIP",
    "GHT_SINGLE_WAY_PNEUMATIC",
    "GHT_TWO_WAY_PNEUMATIC",
    "PNT_MANUAL",
    "PNT_LOW_PRESSURE_TRIP",
    "PNT_SINGLE_WAY_PNEUMATIC",
    "PNT_TWO_WAY_PNEUMATIC",
    "PNT_REGULATING",
    "PNT_TWO_WAY_ELECTRIC",
    "PNT_SINGLE_WAY_ELECTRIC",
    "PNT_SINGLE_SOL_WAY_AND_FAILSAFE",
    "PNT_DOUBLE_DOUBLE_SOL_WAY_AND_FAILSAFE",
    "PNT_ELECTRIC_FAILSAFE",
    "PNT_EMERGENCY_SHUTDOWN",
    "PNT_LINEBREAK",
    "PNT_HIGH_PRESSURE_TRIP",
    "SELF_CONTAINED_MANUAL",
    "SELF_CONTIANED_HIGH_PRESSURE_TRIP",
    "SELF_CONTAINED_LOW_PRESSURE_TRIP",
    "GAS_HYDRAULIC_TANKS",
    "LANG",
    "OPERATOR_TYPE",
    "AUX_QUICK_DISCONNECTS",
    "POWER_REGULATOR",
    "PRESSURE_SWITCH",
    "EJ",
    "REMOTE_MOUNTED_ACTUATOR",
    "SHUTTLE_IN_POWER_LINE",
    "SUB_SEA",
    "POWER_STORAGE_TANK",
    "EO_FILTER",
    "ACCUMULATOR",
    "EQ",
    "DOUBLE_HOLDING_VALVE",
    "EXTRA_FILTER_IN_POWER_LINE",
    "EXTRA_FILTER_IN_PILOT_LINE",
    "MICRON_FILTERS",
    "LUBRICANT_INJECTOR_NORD",
    "PRESSURE_INTENSIFIER",
    "FLOW_REGULATING_VALVES",
    "UNIDIRECTIONAL",
    "BI-DIRECTIONAL",
    "LUBRICATOR",
    "DRIP_TANK",
    "PILOT_ISOLATION_VALVE",
    "INCL_CENTRAL_HYD_SYSTEM",
    "PNEUMATIC_PILOT_OR_SUPPLY",
    "AUXILLIARY_POWER_CONNECTION",
    "PRESSURE_REDUCING_VALVES",
    "BYPASS_VALVE",
    "RELIEF_VALVE",
    "RUPTURE_DISC",
    "FILTER_DRYER",
    "HAND_PUMP_RELIEFS",
    "FM",
    "JOGGING_FEATURE",
    "LEVELING_CHECK",
    "NITROGEN_POWER",
    "POPPET_BLOCK_TYPE",
    "PNEUMATIC",
    "PUMP",
    "REVISION",
    "SELFCONTAINED",
    "SHEET_SIZE",
    "SP_OPT",
    "INFOS",
    "OSM_VERSION_ID"
]

# Open the CSV file for reading
with open(csv_file_path, 'r') as csv_file:
    # Create a CSV reader
    csv_reader = csv.reader(csv_file)
    
    # Open the text file for writing
    with open(text_file_path, 'w') as text_file:
        # Iterate through each row in the CSV file
        for index, row in enumerate(csv_reader):
            # Construct the line to be written to the text file
            row[0] = index
            try:
                date_parts = row[5].split('/')
                row[5] = f"{date_parts[2]}-{date_parts[0].zfill(2)}-{date_parts[1].zfill(2)}"
            except(IndexError, AttributeError):
                pass
            line = "INSERT IGNORE Data ("+ ', '.join([f"{s}" for s in table_columns]) +") VALUES ("+ ', '.join([f"'{cell}'" for cell in row]) + ");"
            # Write the line to the text file
            if index >30:
                text_file.write(line + '\n')

print(f"Text file '{text_file_path}' has been created.")
